import os
import sys
print(f"PYTHONPATH: {os.environ.get('PYTHONPATH')}")
print(f"sys.path: {sys.path}")
import requests
import json
from pydantic import BaseModel, Field
from typing import Optional  # <-- Add this!
from google.adk.tools import FunctionTool 
from dotenv import load_dotenv

load_dotenv() # Load environment variables from .env file

class SeoKeywordGeneratorInputs(BaseModel):
    product_name: str = Field(description="Identifies the product (e.g., FleetIQ).")
    industry_vertical: Optional[str] = Field(default=None, description="Defines the market context (e.g., Logistics/Transportation Tech).")
    target_audience_pain_points: Optional[list[str]] = Field(default=None, description="Captures key challenges to inform search intent (e.g., vehicle maintenance delays).")
    target_audience_goals: Optional[list[str]] = Field(default=None, description="Aligns keywords with user objectives (e.g., reduce downtime).")
    geographic_focus: Optional[str] = Field(default=None, description="Ensures location-specific keywords (e.g., U.S., Canada).")
    user_expertise_level: Optional[str] = Field(default=None, description="Tailors keyword complexity (e.g., intermediate).")
    # Removed: company_size_revenue, saas_solution_category, current_solutions_gaps, additional_context, session_id

class SeoKeywordGeneratorOutputs(BaseModel):
    keywords: list[str] = Field(description="A list of generated SEO keywords.")
    explanation: str = Field(description="A brief explanation of the keyword strategy or categories.")

def generate_seo_keywords(**kwargs) -> SeoKeywordGeneratorOutputs:
    """Generates SEO keywords based on product information and target audience insights via an n8n webhook."""
    # The LLM is passing arguments nested under an 'inputs' key.
    # Extract the actual input dictionary.
    if 'inputs' in kwargs and isinstance(kwargs['inputs'], dict):
        input_data = kwargs['inputs']
    else:
        # Fallback if the structure changes, or if direct arguments are passed
        input_data = kwargs

    try:
        inputs = SeoKeywordGeneratorInputs(**input_data)
    except Exception as e:
        return SeoKeywordGeneratorOutputs(keywords=[], explanation=f"Error parsing inputs: {e}")

    n8n_webhook_url = os.getenv("N8N_SEO_WEBHOOK_URL")
    #n8n_api_key = os.getenv("N8N_SEO_WEBHOOK_API_KEY") # For authenticated webhooks

    if not n8n_webhook_url:
        raise ValueError("N8N_SEO_WEBHOOK_URL environment variable is not set.")

    payload = {
        "product_name": inputs.product_name,
        "industry_vertical": inputs.industry_vertical,
        "target_audience_pain_points": inputs.target_audience_pain_points,
        "target_audience_goals": inputs.target_audience_goals,
        "geographic_focus": inputs.geographic_focus,
        "user_expertise_level": inputs.user_expertise_level,
    }

    headers = {
        "Content-Type": "application/json"
    }
    # Removed API key from headers as authorization is no longer required

    try:
        response = requests.post(n8n_webhook_url, json=payload, headers=headers, timeout=60)
        response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)
        
        content_type = response.headers.get("Content-Type", "")
        if "application/json" not in content_type:
            return SeoKeywordGeneratorOutputs(
                keywords=[], 
                explanation=f"Error: n8n webhook did not return JSON. Response: {response.text[:200]}"
            )
        
        response_data = response.json()

        # MODIFICATION START: Handle the list of keyword objects
        if isinstance(response_data, list):
            extracted_keywords = []
            for item in response_data:
                if isinstance(item, dict) and "keyword" in item:
                    extracted_keywords.append(str(item["keyword"]))
                else:
                    # Handle items that are not dicts or don't have 'keyword' key
                    print(f"Warning: Skipping malformed item in response list: {item}") 
            
            if not extracted_keywords:
                 return SeoKeywordGeneratorOutputs(
                    keywords=[], 
                    explanation=f"Error: n8n webhook response was a list, but no valid 'keyword' entries found. Response: {response_data}"
                )

            return SeoKeywordGeneratorOutputs(
                keywords=extracted_keywords,
                explanation="Keywords generated by n8n workflow. (Explanation not provided by workflow)"
            )
        # MODIFICATION END
        # Original logic if you ever revert n8n to return {"keywords": [...], "explanation": "..."}
        elif "keywords" not in response_data or not isinstance(response_data["keywords"], list):
             return SeoKeywordGeneratorOutputs(
                keywords=[], 
                explanation=f"Error: n8n webhook response missing 'keywords' list or not a list. Response: {response_data}"
            )
        # If n8n returns the old format, this will still work for keywords, but explanation might be missing
        return SeoKeywordGeneratorOutputs(
            keywords=response_data.get("keywords", []),
            explanation=response_data.get("explanation", "Keywords generated by n8n workflow. (Explanation may not be provided)")
        )

    except requests.exceptions.RequestException as e:
        return SeoKeywordGeneratorOutputs(keywords=[], explanation=f"Request to n8n webhook failed: {e}")
    except json.JSONDecodeError as e:
        return SeoKeywordGeneratorOutputs(keywords=[], explanation=f"Failed to decode JSON response from n8n webhook: {e}. Response text: {response.text[:200]}")
    except Exception as e:
        return SeoKeywordGeneratorOutputs(keywords=[], explanation=f"An unexpected error occurred: {e}")

# --- CORRECTED INITIALIZATION ---
seo_keyword_generator_tool = FunctionTool(func=generate_seo_keywords)

# --- Local Testing for the tool --- (Optional)
if __name__ == "__main__":
    sample_inputs = SeoKeywordGeneratorInputs(
        product_name="AI-Powered Email Marketing Platform",
        target_audience_pain_points=["Low email open rates", "Difficulty personalizing emails at scale", "Wasting time on manual email campaigns"],
        target_audience_goals=["Increase engagement", "Improve conversion rates", "Automate email workflows"],
        current_solutions_gaps=["Lack of advanced AI features", "Poor integration capabilities", "Complex user interface"],
        user_expertise_level="intermediate",
        additional_context="Focus on B2B SaaS companies"
    )
    
    print(f"Attempting to call n8n webhook at: {os.getenv('N8N_SEO_WEBHOOK_URL')}")
    try:
        output = generate_seo_keywords(sample_inputs)
        print("\n--- Tool Output ---")
        print(f"Keywords: {output.keywords}")
        print(f"Explanation: {output.explanation}")
    except ValueError as ve:
        print(f"Configuration Error: {ve}")
    except Exception as e:
        print(f"An error occurred during tool test: {e}")